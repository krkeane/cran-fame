This package provides an interface to the FAME time series database from
Sungard.  If you don't have the FAME DBMS installed, this package is pretty
useless.  The ti (Time Index) and tis (Time Indexed Series) functionality of
earlier versions has been separated out into the tis package, which does not
need FAME.

LINUX INSTALLATION

There is no standard location for a FAME installation, so the configure script
makes no attempt to look for one.  Instead, you must tell R where the main
fame directory is, i.e., the directory that contains the hli subdirectory
which in turn contains hli.h and the libchli.so library.  Note that on 64 bit
Linux, the 64-bit libraries are in $fameDir/hli/64, while the hli.h is in
$fameDir/hli. 

You can tell R where the directory is in one of two ways:

 (i) If the FAME environment variable is set, the hli.h file should be $FAME/hli/hli.h.

(ii) use a configure arg  --with-fameDir=DIR , i.e., 

R CMD INSTALL --library=library --configure-args='--with-fameDir=/opt/fame/fame' fame_2.3.tar.gz

Supplying the fameDir location via --configure-args overrides any FAME
environment variable.  

If no fameDir is found, the install process will build an utterly useless
fame.so containing only a dummyFameFunction.


WINDOWS INSTALLATION

The package does not need FAME installed to build or install.  However, it
does expect to find a FAME installation either in c:/Program Files/FAME or in
the directory given by the environment variable FAME.


CUSTOMIZATION:
There are two functions that you may want to (re)implement and put ahead of
fame on the search path.  

  (i) fameLocalInit():  When starting FAME, the fameStart() function opens a
      work database and then invokes fameLocalInit(), if it exists. My own
      version (not part of this package) loads some additional Federal Reserve
      Board code, i.e.,

      fameLocalInit <- function(){ 
        fameCommand('load file("/opt/fame/frb/pc/lib.pc")', silent = T) 
        fameCommand('load file("/opt/fame/frb/pc/syslib.pc")', silent = T)
      }

 (ii) fameLocalPath(dbString):  takes a string argument and returns a string,
      which should either be a path to a database or the input string. 
      This is called by the internal function getFamePath(dbString), which
      first checks to see if dbString is already the path to an existing file.
      If not, and the function fameLocalPath exists, it gets called with
      dbString as its argument.  The return value from fameLocalPath() is
      checked, and if it is not the path to an existing file, getFamePath()
      returns NULL.

	  At the Federal Reserve Board, we have "registered" databases, and a
	  shell script that can find the path to a registered database given its
	  name.  So our fameLocalPath() tries the registered databases lookup,
	  returning the path name if it succeeds, or the original dbString.

